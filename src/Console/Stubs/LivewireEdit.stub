<?php

namespace {{ vendor }}\{{ plugin }}\Livewire\{{ singularUcfirst }};

use Livewire\Component;
use Livewire\WithFileUploads;


class {{ singularUcfirst }}Edit extends Component
{
    use WithFileUploads;

    public ${{ singularStrtolower }};
    
    



    public function mount($recordId = null)
    {
        
       
        $this->{{ singularStrtolower }}       = \{{ vendor }}\{{ plugin }}\Models\{{ singularUcfirst }}::find($recordId);
      
        $this->authorize('update',[\{{ vendor }}\{{ plugin }}\Models\{{ singularUcfirst }}::class,$this->{{ singularStrtolower }}]);
        //$this->date                                 = $this->{{ singularStrtolower }}->date->format(config('starterkid.time_format.date_format_for_picker'));
        //$this->date_time                            = $this->{{ singularStrtolower }}->date_time->format(config('starterkid.time_format.date_time_format_for_picker'));
        //$this->time                                 = $this->{{ singularStrtolower }}->time->format(config('starterkid.time_format.time_format_for_picker'));
            
       
    }

    public function save()
    {


        $validated = $this->validate([
            //'title'                     => 'required|string',
            //'color'                     => 'required|string',
            //'range'                     => 'required|string',
            //'about'                     => 'required|string',
            //'country'                   => 'required|string',
            //'active'                    => 'required|boolean',
            //'radio'                     => 'required|string',
            //'date'                      => 'required|date_format:' . config('starterkid.time_format.date_format_for_picker'),
            //'date_time'                 => 'required|date_format:' . config('starterkid.time_format.date_time_format_for_picker'),
            //'time'                      => 'required|date_format:' . config('starterkid.time_format.time_format_for_picker'),
            //'body'                      => 'required|string',
            //'youtube_video_link'        => 'required|string',
            //'vimeo_video_link'          => 'required|string',
           
        ]);
        
       
        $this->authorize('update',[\{{ vendor }}\{{ plugin }}\Models\{{ singularUcfirst }}::class,$this->post]);
        $validated = array_merge($validated, ['team_id' => auth()->user()->currentTeam->id]);
        $this->{{ singularStrtolower }}->update($validated);
       

        //if ($this->public_photos !== []) {
        //\GrassFeria\Starterkid\Jobs\SpatieMediaLibary\DeleteMediaCollection::dispatch($this->{{ singularStrtolower }},'avatars');
        //(new \GrassFeria\Starterkid\Services\SpatieMediaLibary\SaveMediaWithFilenameService($this->public_photos,$this->{{ singularStrtolower }},'photos','public','my-new-filename'));
        //(new \GrassFeria\Starterkid\Services\SpatieMediaLibary\SaveMediaService($this->public_photos, $this->{{ singularStrtolower }}, 'photos', 'public'));
        //}
        
        return redirect()->route('{{ pluralStrtolower }}.index')->with('success', '{{ singularUcfirst }} updated');

    }
    public function render()
    {
        
        return view('{{ pluginStrToLower }}::livewire.{{ singularStrtolowerKebab }}.{{ singularStrtolowerKebab }}-edit');
        
    }
}
